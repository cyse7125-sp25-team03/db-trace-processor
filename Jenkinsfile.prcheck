void setBuildStatus(String message, String state) {
    def repo = env.GIT_URL.replaceAll(/\.git$/, "").replaceAll(/^.*github.com[:\/]/, "")
    def commitSHA = env.GIT_COMMIT // Jenkins automatically provides this

    sh """
    curl -X POST -H "Authorization: token ${env.GITHUB_TOKEN}" \
         -H "Accept: application/vnd.github.v3+json" \
         https://api.github.com/repos/${repo}/statuses/${commitSHA} \
         -d '{
           "state": "${state}",
           "target_url": "${env.BUILD_URL}",
           "description": "${message}",
           "context": "ci/jenkins/${JOB_NAME}"
         }'
    """
}


pipeline {
    agent any
    
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
    }
    stages {
        stage('Initialize Build') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-pat', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
                    setBuildStatus("Build is starting...'", "PENDING");
                }
            }
        }
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }
        
        stage('PR Validation') {
            steps {
                script {
                    echo "This is a PR validation for PR#${env.CHANGE_ID}"
                    sh 'docker build --no-cache -t test-build .'
                    
                }
            }
        }
    }    
    
    post {
        success {
                withCredentials([usernamePassword(credentialsId: 'github-pat', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
                    setBuildStatus("Build succeeded'", "SUCCESS");
                }
        }
        failure {
            withCredentials([usernamePassword(credentialsId: 'github-pat', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
                setBuildStatus("Build failed'", "FAILURE");
            }
        }
        always {
            cleanWs()
        }
    }
}